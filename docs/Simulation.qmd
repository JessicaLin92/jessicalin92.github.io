---
title: "Project 2: Text Analysis"
output:
  html_document:
    message: FALSE
    warning: FALSE
---

For this project, we aimed to construct a simulation of students doing course registration at the Claremont Colleges. In order to create this simulation, We first defined a function that simulate the regiration action, next we assign students into a list that reprsent the order of course registration time. Last, we define the result for whether one particular student can get into the class such as 1 being True: the student can get into the class, or 0 being False: the student would not get into the class.

```{r}
simulate_registration <- function(class_size, num_students, priority_weight = NULL) {
  if (!is.null(priority_weight)) {
    priority <- sample(1:num_students, num_students, replace = TRUE, prob = priority_weight)
    priority_order <- order(priority)
  } else {
    priority_order <- sample(1:num_students)
  }

registered_students <- priority_order[1:class_size]
return(ifelse(1 %in% registered_students, TRUE, FALSE))
}
```

After we finish setting up and defining the function, now we run it with map to rerun and simulate the event.For our simulation, because of how small the class at the Claremont colleges normally are, let's put 20 as the class_size for this imaginary class. For the students number, although the total students number may be high, however, we should only consider the numnber of students that may be interested into taking this imaginary class, thus let's assume there are 50 students wanting to get into this class. In turns of priorit weight, since all claremont colleges students register at the same time, the only difference is the grade year, therefore I am setting the order as seniors goes first, and then junior, then sophomore, and last will be freshman. For this 10 will be seniors, 10 will be juniors, and 10 will be sophomores, and the rest of the 20 students will be freshman.

For number of simulations, I choose to run 1000 times because in probability simulations, running multiple trials reduces random variability and gives a more stable estimate of the true probability.

```{r}
library(purrr)

class_size <- 20
num_students <- 50
num_simulations <- 1000
priority_weight <- c(rep(0.4, 10), rep(0.3, 10), rep(0.2, 10), rep(0.1, 20))

results <- map_int(1:num_simulations, ~ simulate_registration(class_size = class_size, num_students = num_students, priority_weight = priority_weight))

num_true <- sum(results == 1)
probability <- num_true / num_simulations

print(paste("Probability that student #1 gets a spot:", probability))
```

After a few trials of 1000 times simulations, the general probability value we are getting are between 0.38 \~ 0.42, which basically concluded that for this course registration simulation with 50 students trying to get in a 20 spot class, the probability of getting in is around 0.4.

```{r}
library(ggplot2)

data <- data.frame(
  Trial = 1:num_simulations,
  Outcome = as.factor(results)
)

ggplot(data, aes(x = Outcome)) +
  geom_bar() +
  labs(title = "Simulation of Course Registration",
       x = "Outcome (1 = Got in, 0 = Did not get in)",
       y = "Frequency") 
```

This plot display the results of the 1000 trials that we run, and within these 1000 times, whether the student gets into the class. 1 being they did manager to get into the class, and 0 being they didn't.

#Conclusion

For this project, we use R to simulate the course registration event here at 5C colleges, although the numbers we input are very much based on assumptions, we do successfully use R to simulate and get a sense of the probabilities of 1 student getting into the class that 50 students are interested in.

Some possible limitation or improvement for furture simulation: - Could potentially take the concept of 'majors' into consideration as they tends to have a prioritizes when regsirtating for their major classes. - In the similar manner, we can also take into consideration of 'perms' since this is the way professor approve or disapprove students' ability to register the class.
